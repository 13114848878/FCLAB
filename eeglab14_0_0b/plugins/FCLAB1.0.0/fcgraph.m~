function outEEG=fcgraph(inEEG)
metric=inEEG.FC.graph_prop.metric;
disp('>> FCLAB: Computing graph theoretical parameters')
eval(['bands=fieldnames(inEEG.FC.' metric ');']);

if(inEEG.FC.graph_prop.plus_minus)
    signs={'plus','minus'};
    if(inEEG.FC.graph_prop.symmetrize)
        for i=1:length(bands)
            eval(['A=inEEG.FC.' metric '.' bands{i} '.adj_matrix;']);
            for x1=1:inEEG.nbchan-1;
                for x2=x1+1:inEEG.nbchan
                    A(x1,x2)=max(A(x1,x2),A(x2,x1));
                    A(x2,x1)=A(x1,x2);
                end;
            end;
            eval(['inEEG.FC.' metric '.' bands{i} '.sym_adj_matrix=A;']);
            clear A;
        end;
    end;
    for i=1:length(bands)
        for sign=1:length(signs)
    
    
else
    if(inEEG.FC.graph_prop.symmetrize)
        for i=1:length(bands)
            eval(['A=inEEG.FC.' metric '.' bands{i} '.adj_matrix;']);
            for x1=1:inEEG.nbchan-1;
                for x2=x1+1:inEEG.nbchan
                    A(x1,x2)=max(A(x1,x2),A(x2,x1));
                    A(x2,x1)=A(x1,x2);
                end;
            end;
            eval(['inEEG.FC.' metric '.' bands{i} '.sym_adj_matrix=A;']);
            clear A;
        end;
    end;

    if((inEEG.FC.graph_prop.threshold==1) & isempty(inEEG.FC.graph_prop.absthr) & isempty(inEEG.FC.graph_prop.propthr))
        error('No Value for Threshold')
        return;
    else
        if(inEEG.FC.graph_prop.symmetrize==0)
            if(~isempty(inEEG.FC.graph_prop.absthr))
                if (inEEG.FC.graph_prop.binarize==0)
                    for i=1:length(bands)
                        eval(['inEEG.FC.' metric '.' bands{i} '.absthr_'...
                            strrep(inEEG.FC.graph_prop.absthr,'.','_')...
                            '=threshold_absolute(inEEG.FC.' metric '.' bands{i}...
                            '.adj_matrix,' inEEG.FC.graph_prop.absthr ');']);
                    end;
                else
                    for i=1:length(bands)
                        eval(['A=threshold_absolute(inEEG.FC.' metric '.' bands{i} ...
                            '.adj_matrix,' inEEG.FC.graph_prop.absthr ');']);
                        A(A~=0)=1;
                        eval(['inEEG.FC.' metric '.' bands{i} '.bin_absthr_'...
                            strrep(inEEG.FC.graph_prop.absthr,'.','_') '=A;']);
                        clear A;

                    end;
                end;
            end;

            if(~isempty(inEEG.FC.graph_prop.propthr))
                if (inEEG.FC.graph_prop.binarize==0)
                    for i=1:length(bands)
                        eval(['inEEG.FC.' metric '.' bands{i} '.propthr_'...
                            inEEG.FC.graph_prop.propthr ...
                            '=threshold_proportional(inEEG.FC.' metric '.'...
                            bands{i} '.adj_matrix,' ...
                            num2str(str2num(inEEG.FC.graph_prop.propthr)/100) ');']);
                    end;
                else
                   for i=1:length(bands)
                        eval(['A=threshold_proportional(inEEG.FC.' metric '.' bands{i} ...
                            '.adj_matrix,' num2str(str2num(inEEG.FC.graph_prop.propthr)/100) ');']);
                        A(A~=0)=1;
                        eval(['inEEG.FC.' metric '.' bands{i} '.bin_propthr_'...
                            inEEG.FC.graph_prop.propthr '=A;']);
                        clear A;
                    end;
                end;     
            end;
        else
            if(~isempty(inEEG.FC.graph_prop.absthr))
                if (inEEG.FC.graph_prop.binarize==0)
                    for i=1:length(bands)
                        eval(['inEEG.FC.' metric '.' bands{i} '.sym_absthr_'...
                            strrep(inEEG.FC.graph_prop.absthr,'.','_')...
                            '=threshold_absolute(inEEG.FC.' metric '.' bands{i}...
                            '.sym_adj_matrix,' inEEG.FC.graph_prop.absthr ');']);
                    end;
                else
                    for i=1:length(bands)
                        eval(['A=threshold_absolute(inEEG.FC.' metric '.' bands{i} ...
                            '.sym_adj_matrix,' inEEG.FC.graph_prop.absthr ');']);
                        A(A~=0)=1;
                        eval(['inEEG.FC.' metric '.' bands{i} '.sym_bin_absthr_'...
                            strrep(inEEG.FC.graph_prop.absthr,'.','_')...
                            '=A;']);
                        clear A;

                    end;
                end;
            end;

            if(~isempty(inEEG.FC.graph_prop.propthr))
                if (inEEG.FC.graph_prop.binarize==0)
                    for i=1:length(bands)
                        eval(['inEEG.FC.' metric '.' bands{i} '.sym_propthr_'...
                            inEEG.FC.graph_prop.propthr ...
                            '=threshold_proportional(inEEG.FC.' metric '.' ...
                            bands{i} '.sym_adj_matrix,'...
                            num2str(str2num(inEEG.FC.graph_prop.propthr)/100) ');']);
                    end;
                else
                   for i=1:length(bands)
                        eval(['A=threshold_proportional(inEEG.FC.' metric '.' bands{i} ...
                            '.adj_matrix,' num2str(str2num(inEEG.FC.graph_prop.propthr)/100) ');']);
                        A(A~=0)=1;
                        eval(['inEEG.FC.' metric '.' bands{i} '.sym_bin_propthr_'...
                            inEEG.FC.graph_prop.propthr '=A;']);
                        clear A;
                    end;
                end;     
            end;
        end;
    end;
end


% for i=1:length(bands)
%     eval(['L = weight_conversion(inEEG.FC.' metric '.' bands{i} '.adj_matrix, ''lengths'' );']) %connection-length matrix
%     D = distance_wei(L); %distance matrix
%     %local measures
%     eval(['inEEG.FC.' metric '.'  bands{i}  '.local.BC = betweenness_wei(L)./((inEEG.nbchan-1)*(inEEG.nbchan-2));']);
%     eval(['inEEG.FC.' metric '.'  bands{i}  '.local.DEG = degrees_und(inEEG.FC.' metric '.' bands{i} '.adj_matrix)./(inEEG.nbchan-1);'])
%     eval(['[~, ~, intEEG.FC.' metric '.'  bands{i}  '.local.ECC, ~, ~] = charpath(D);'])
%     eval(['inEEG.FC.' metric '.'  bands{i}  '.local.clustcoef = clustering_coef_wu(inEEG.FC.' metric '.' bands{i} '.adj_matrix);'])
%     eval(['inEEG.FC.' metric '.'  bands{i}  '.local.Elocal = efficiency_wei(inEEG.FC.' metric '.' bands{i} '.adj_matrix, 1);']) %or 2 for modified version
%     eval(['inEEG.FC.' metric '.'  bands{i}  '.local.EC = eigenvector_centrality_und(inEEG.FC.' metric '.' bands{i} '.adj_matrix);'])
% 
%     %global measures
%     eval(['[~, ~, ~, inEEG.FC.' metric '.'  bands{i}  '.global.rad, inEEG.FC.' metric '.'  bands{i}  '.global.diam] = charpath(D);']);
%     eval(['inEEG.FC.' metric '.'  bands{i}  '.global.LN = leaf_nodes(inEEG.FC.' metric '.' bands{i} '.adj_matrix);']);
%     eval(['[inEEG.FC.' metric '.'  bands{i}  '.global.lambda, ~, ~, ~, ~] = charpath(D);']);
%     %outEEG.FC.Correlation.global.DEGcor = pearson(temp_adj); %CHECK
%     %THIS --> this is fot weighted
%     eval(['inEEG.FC.' metric '.'  bands{i}  '.global.Eglobal = efficiency_wei(inEEG.FC.' metric '.' bands{i} '.adj_matrix, 0);']);
% 
% end;
outEEG=inEEG;
